# Tests more advanced features of various literals.

# Decimal points
assert(1.05 != 105)

# Underscores in numbers
assert(1_000 == 1000)
assert(0.0_001 == 0.0001)
assert(1___________0 == 10)

# Exponents
assert(1e10 == 10000000000)
assert(1e10 == 1e+10)
assert(1e-1 == 0.1)
assert(1e-10 == 1e10.recip)

# Explicit radix
assert(\2:110 == 6)
assert(\4:2 + \4:2 == \4:10)
assert(\36:Rust == 1299629)
assert(\16:deadbeef == 3735928559)
assert(\36:foo_bar == 948437811)

# Shorthand radix
assert(\b110 == \2:110)
assert(\b110 == \B110)
assert(\o777 == \8:777)
assert(\o777 == 511)
assert(\xDEADBEEF == \16:DEADBEEF)
assert(\xDEADBEEF == \XDEADBEEF)

# String escapes
assert("\\".byte_at(0) == 92)
assert("\"".byte_at(0) == 34)
assert("\'" == "'")
assert("\n".byte_at(0) == 10)
assert("\r".byte_at(0) == 13)
assert("\t".byte_at(0) == 9)
assert("\u{107}" == "Ä‡")

# Raw strings
assert(\r"C:\Windows\System32" == "C:\\Windows\\System32")

# Long strings
s =
   \\Hello
   \\ world!
# Replace CRLF to LF for Windows.
assert(s.replace("\r\n", "\n") == "Hello\n world!")

# Character literals
assert(\u'Ä‡' == \x107)
assert(\u'ðŸ—¿' == \x1F5FF)
