# Checks if closures work.

# Closures without captures act like normal functions.
f = func (x) = x + 1
assert(f(1) == 2)

# Closures can have constant captures.
func adder(x) =
   func (y) = x + y
add_two = adder(2)
assert(add_two(2) == 4)

# Closures may modify captured variables.
func counter(start, increment) = do
   i = start
   (func () = do
      value = i
      i = i + increment
      value
   end)
end
c = counter(10, 1)
assert(c() == 10)
assert(c() == 11)
assert(c() == 12)
assert(c() == 13)

# Two closures may refer to and modify the same variable.
get = nil
inc = nil
do
   count = 1
   get = func () = count
   inc = func () = count = count + 1
end
assert(get() == 1)
assert(inc() == 2)
assert(get() == 2)

# A closure may capture a variable that's captured in another closure.
func double_indirection(x) =
   func (y) =
      func (z) =
         x + y + z
w = double_indirection(1)(2)(3)
assert(w == 6)

# A doubly-indirected variable (like above) can still be modified like usual.
set = nil
get = nil
func double_indirection_mut() = do
   val = 1
   (func () = do
      set = func (x) = val = x
      get = func () = val
   end)
end
setup = double_indirection_mut()
setup()
set(100)
assert(get() == 100)
