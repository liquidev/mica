# Tests the ability to create and implement structs.

# Two defined struct types are never equal to each other.
struct Test
struct Other
assert(Test == Test)
assert(Other == Other)
assert(Test != Other)

# A struct expression returns the struct.
assert(struct Test2 != nil)

# A struct can be implemented with arbitrary methods.
struct Greetings impl
   func get(for_whom) static =
      "Hello, ".cat(for_whom).cat("!")
end

assert(Greetings.get("World") == "Hello, World!")

# A struct can have a constructor that sets its fields up.
# It can also have instance methods.
struct Vector impl
   func new(x, y) constructor = do
      @x = x
      @y = y
   end

   # There can be more than one constructor. Each constructor after the first one must assign
   # the same set of fields.
   func zero() constructor = do
      @x = 0
      @y = 0
   end

   func x() = @x
   func y() = @y

   func set_x(x) = @x = x
   func set_y(y) = @y = y

   func len_sq() =
      @x * @x + @y * @y

   func len() =
      self.len_sq.sqrt
end

v = Vector.new(1, 2)
assert(v.x == 1)
assert(v.y == 2)
v.set_x(4)
v.set_y(5)
assert(v.x == 4)
assert(v.y == 5)
assert(Vector.new(3, 4).len == 5)
z = Vector.zero
assert(z.x == 0)
assert(z.y == 0)

# Two constructed struct instances are never equal to each other.
u = Vector.new(1, 2)
v = Vector.new(1, 2)
assert(u == u)
assert(v == v)
assert(u != v)

# `impl` blocks return the implemented struct.
assert(struct ErgonomicImpl impl end == ErgonomicImpl)
