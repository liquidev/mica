# Checks that functions work.
# See closures.mi for the test cases regarding closures.

# Functions can be declared, in this case to not do anything.
func nop() = nil

# Function items return nil.
assert(do
   func f() = nil
end == nil)

# Arguments should not affect the function's result.
func discard(x) = nil
assert(discard(1) == nil)

# A function is equal to itself, but never to other functions.
assert(nop == nop)
assert(nop != discard)

# A function returns the value after `=`.
func add_one(x) =
   x + 1
assert(add_one(1) == 2)

# New locals can be declared in functions.
func declare_some_locals(x) = do
   y = x + 1
   assert(y == x + 1)
   x + y
end
assert(declare_some_locals(2) == 5)

# Functions can be called recursively.
func fib(n) =
   if n == 0 or n == 1 do n
   else fib(n - 1) + fib(n - 2)
   end
assert(fib(20) == 6765)
# Deep recursion may take a while but should never crash the program (unless we run out of memory).
assert(fib(30) == 832040)

# `return` can be used to return from the function early.
func test_return(x) = do
   if x == 1 do
      return 123
   end
   x + 1
end

assert(test_return(0) == 1)
assert(test_return(1) == 123)
